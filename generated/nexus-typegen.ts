/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CreateRecipeInput: { // input type
    ingredientIds?: Array<number | null> | null; // [Int]
    method?: string | null; // String
    title?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  CreateRecipeResult: { // root type
    id?: number | null; // Int
    title?: string | null; // String
  }
  Ingredient: { // root type
    currentPrice?: number | null; // Float
    id?: number | null; // Int
    name?: string | null; // String
    supplier?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Recipe: { // root type
    id?: number | null; // Int
    ingredients?: Array<NexusGenRootTypes['Ingredient'] | null> | null; // [Ingredient]
    method?: string | null; // String
    title?: string | null; // String
    totalCost?: number | null; // Float
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  CreateRecipeResult: { // field return type
    id: number | null; // Int
    title: string | null; // String
  }
  Ingredient: { // field return type
    currentPrice: number | null; // Float
    id: number | null; // Int
    name: string | null; // String
    supplier: string | null; // String
  }
  Mutation: { // field return type
    createRecipe: NexusGenRootTypes['CreateRecipeResult'] | null; // CreateRecipeResult
  }
  Query: { // field return type
    ingredient: NexusGenRootTypes['Ingredient'] | null; // Ingredient
    ingredients: Array<NexusGenRootTypes['Ingredient'] | null> | null; // [Ingredient]
    recipe: NexusGenRootTypes['Recipe'] | null; // Recipe
    recipes: Array<NexusGenRootTypes['Recipe'] | null> | null; // [Recipe]
  }
  Recipe: { // field return type
    id: number | null; // Int
    ingredients: Array<NexusGenRootTypes['Ingredient'] | null> | null; // [Ingredient]
    method: string | null; // String
    title: string | null; // String
    totalCost: number | null; // Float
  }
}

export interface NexusGenFieldTypeNames {
  CreateRecipeResult: { // field return type name
    id: 'Int'
    title: 'String'
  }
  Ingredient: { // field return type name
    currentPrice: 'Float'
    id: 'Int'
    name: 'String'
    supplier: 'String'
  }
  Mutation: { // field return type name
    createRecipe: 'CreateRecipeResult'
  }
  Query: { // field return type name
    ingredient: 'Ingredient'
    ingredients: 'Ingredient'
    recipe: 'Recipe'
    recipes: 'Recipe'
  }
  Recipe: { // field return type name
    id: 'Int'
    ingredients: 'Ingredient'
    method: 'String'
    title: 'String'
    totalCost: 'Float'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createRecipe: { // args
      data: NexusGenInputs['CreateRecipeInput']; // CreateRecipeInput!
    }
  }
  Query: {
    ingredient: { // args
      id: number; // Int!
    }
    recipe: { // args
      id: number; // Int!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}